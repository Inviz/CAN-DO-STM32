#ifndef INC_MODULE_TIMER
#define INC_MODULE_TIMER

#ifdef __cplusplus
extern "C" {
#endif

#define TIMER_UNITS 10

#include "core/device.h"

/* Start of autogenerated OD types */
/* 0x6100: Module Timer 1
   TIM1 timer */
typedef struct module_timer_properties {
    uint8_t parameter_count;
    uint8_t prescaler;
    uint8_t initial_subscriptions_count;
    uint32_t period;
    uint32_t frequency;
    uint8_t phase;
} module_timer_properties_t;
/* End of autogenerated OD types */

typedef struct module_timer_subscription {
    device_t *device;
    uint32_t time;
    void *argument;
} module_timer_subscription_t;


struct module_timer {
    device_t *device;
    module_timer_properties_t *properties;

    uint32_t current_time; // timestamp that gets updated on every interrupt/timer subscription
    uint32_t next_time;    // next subscription time (-1 if there arent any)
    uint32_t next_tick;   // scheduled interval (usually equals to timer period)

    uint32_t address;
    uint16_t reset;
    uint16_t clock;
    uint8_t irq;
    uint8_t peripheral_clock;
    uint8_t source;

    #ifdef DEBUG
        uint32_t debug_stopper;
    #endif
    
    module_timer_subscription_t *subscriptions;
};


extern device_methods_t module_timer_methods;

// set/update alarm timeout in microseconds from now (per device/argument pair), start timer if needed
app_signal_t module_timer_timeout(module_timer_t *timer, device_t *device, void *argument, uint32_t timeout);

// clear alarm for given device/argument pair, deschedule ticks and stop timer if needed
app_signal_t module_timer_clear(module_timer_t *timer, device_t *device, void *argument);

/* Start of autogenerated OD accessors */
#define SUBIDX_TIMER_PRESCALER 0x1
#define SUBIDX_TIMER_INITIAL_SUBSCRIPTIONS_COUNT 0x2
#define SUBIDX_TIMER_PERIOD 0x3
#define SUBIDX_TIMER_FREQUENCY 0x4
#define SUBIDX_TIMER_PHASE 0x5

ODR_t module_timer_set_prescaler(module_timer_t *timer, uint8_t value); // 0x61XX01: timer properties prescaler
uint8_t module_timer_get_prescaler(module_timer_t *timer); // 0x61XX01: timer properties prescaler
ODR_t module_timer_set_initial_subscriptions_count(module_timer_t *timer, uint8_t value); // 0x61XX02: timer properties initial_subscriptions_count
uint8_t module_timer_get_initial_subscriptions_count(module_timer_t *timer); // 0x61XX02: timer properties initial_subscriptions_count
ODR_t module_timer_set_period(module_timer_t *timer, uint32_t value); // 0x61XX03: timer properties period
uint32_t module_timer_get_period(module_timer_t *timer); // 0x61XX03: timer properties period
ODR_t module_timer_set_frequency(module_timer_t *timer, uint32_t value); // 0x61XX04: timer properties frequency
uint32_t module_timer_get_frequency(module_timer_t *timer); // 0x61XX04: timer properties frequency
ODR_t module_timer_set_phase(module_timer_t *timer, uint8_t value); // 0x61XX05: timer properties phase
uint8_t module_timer_get_phase(module_timer_t *timer); // 0x61XX05: timer properties phase
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif