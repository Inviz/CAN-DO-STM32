#ifndef INC_MODULE_TIMER
#define INC_MODULE_TIMER

#ifdef __cplusplus
extern "C" {
#endif

#define TIMER_UNITS 10

#include "core/device.h"

/* Start of autogenerated OD types */
/* 0x6100: Module Timer 1
   TIM1 timer */
typedef struct module_timer_config {
    uint8_t parameter_count;
    int16_t disabled;
    uint8_t prescaler;
    uint8_t initial_subscriptions_count;
    uint32_t period;
    uint32_t frequency;
} module_timer_config_t;
/* End of autogenerated OD types */

typedef struct module_timer_subscription {
    device_t *device;
    uint32_t time;
    void *argument;
} module_timer_subscription_t;


struct module_timer {
    device_t *device;
    module_timer_config_t *config;

    uint32_t current_time;
    uint32_t next_time;

    uint32_t next_tick;

    uint32_t address;
    uint32_t clock;
    uint32_t irq;
    uint32_t reset;
    uint8_t source;
    uint32_t peripheral_clock;

    #ifdef DEBUG
        uint32_t debug_stopper;
    #endif
    
    module_timer_subscription_t *subscriptions;
};


extern device_methods_t module_timer_methods;

// set/update alarm timeout in microseconds from now (per device/argument pair), start timer if needed
app_signal_t module_timer_timeout(module_timer_t *timer, device_t *device, void *argument, uint32_t timeout);

// clear alarm for given device/argument pair, deschedule ticks and stop timer if needed
app_signal_t module_timer_clear(module_timer_t *timer, device_t *device, void *argument);

/* Start of autogenerated OD accessors */
#define SUBIDX_TIMER_DISABLED 0x1
#define SUBIDX_TIMER_PRESCALER 0x2
#define SUBIDX_TIMER_INITIAL_SUBSCRIPTIONS_COUNT 0x3
#define SUBIDX_TIMER_PERIOD 0x4
#define SUBIDX_TIMER_FREQUENCY 0x5

/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif