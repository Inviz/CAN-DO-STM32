#ifndef INC_TYPES
#define INC_TYPES

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
typedef uint_fast8_t bool_t;

// Global variable is only used for interrupts

typedef struct app app_t;                         /* Generic application object, acts as a global root */
typedef struct app_thread app_thread_t;           /* A FreeRTOS thread that handles multiple devices*/
typedef struct app_threads app_threads_t;         /* List of built in threads in order corresponding to device ticks*/
typedef struct app_event app_event_t;             /* Data sent between devices placed into a bus */
typedef enum app_event_status app_event_status_t; /* Status of event interaction with device */
typedef enum app_event_type app_event_type_t;     /* Possible types of messages */
typedef struct device device_t;                   /* Generic object container correspondig to Object Dictionary entry */
typedef struct device_tick device_tick_t;         /* A device callback running within specific app thread*/
typedef struct device_ticks device_ticks_t;       /* List of device tick handlers in order corresponding to app threads */
typedef struct device_class device_class_t;   /* Method list to essentially subclass devices */
typedef enum device_type device_type_t;           /* List of device groups found in Object Dictionary*/
typedef enum device_phase device_phase_t;         /* All phases that device can be in*/
typedef enum app_signal app_signal_t;             /* Things that device tell each other */
typedef struct app_task app_task_t;               /* State machine dealing with high_priority commands*/
typedef enum app_task_signal app_task_signal_t;   /* Commands to advance step machine*/

typedef struct device_blank device_blank_t; /* Example blank device */
/* Start of autogenerated OD types */
typedef struct device_circuit device_circuit_t /* A relay that turns circuit on and off, possibly using PWM. Can be paired with Hall Sensor to measure current for taking metrics via ADC. Applying current limit will turn relay into a circuit breaker.*/;
typedef struct system_mcu system_mcu_t /* */;
typedef struct system_canopen system_canopen_t /* CANOpen framework*/;
typedef struct module_timer module_timer_t /* TIM1 timer*/;
typedef struct transport_can transport_can_t /* */;
typedef struct transport_spi transport_spi_t /* ADC Unit used for high-volume sampling of analog signals*/;
typedef struct transport_usart transport_usart_t /* Serial protocol*/;
typedef struct transport_i2c transport_i2c_t /* Serial protocol*/;
typedef struct transport_modbus transport_modbus_t /* Modbus over USART powered by DMA*/;
typedef struct module_adc module_adc_t /* ADC Unit used for high-volume sampling of analog signals*/;
typedef struct storage_eeprom storage_eeprom_t /* */;
typedef struct storage_w25 storage_w25_t /* Winbond flash storage device over SPI*/;
typedef struct storage_flash storage_flash_t /* Internal flash storage*/;
typedef struct memory_sram memory_sram_t /* */;
typedef struct input_sensor input_sensor_t /* A sensor that measures a single analog value (i.e. current meter, tank level meter)*/;
typedef struct control_touchscreen control_touchscreen_t /* */;
typedef struct screen_epaper screen_epaper_t /* E-ink screen with low power consumption and low update frequency*/;
typedef struct indicator_led indicator_led_t /* */;
typedef struct signal_beeper signal_beeper_t /* */;
/* End of autogenerated OD types */

typedef app_task_signal_t (*device_on_task_t)(app_task_t *task);
typedef app_signal_t (*device_on_event_t)(void *object, app_event_t *event);
typedef app_signal_t (*device_on_tick_t)(void *object, app_event_t *event, device_tick_t *tick, app_thread_t *thread);
typedef app_signal_t (*device_on_phase_t)(void *object, device_phase_t phase);
typedef app_signal_t (*device_on_value_t)(void *object, device_t *device, void *value, void *argument);
typedef app_signal_t (*device_on_link_t)(void *object, device_t *device, void *argument);
typedef app_signal_t (*device_on_signal_t)(void *object, device_t *device, app_signal_t signal, void *argument);
typedef app_signal_t (*app_method_t)(void *object);

#ifdef DEBUG
#include <stdio.h>
#define log_printf printf
#define error_printf printf
#else
#define log_printf(...)
#define error_printf(...)
#endif

#ifdef DEBUG
#include <stdio.h>
#define log_printf printf
#define error_printf printf
#else
#define log_printf(...)
#define error_printf(...)
#endif

#endif