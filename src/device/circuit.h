#ifndef INC_DEV_CIRCUIT
#define INC_DEV_CIRCUIT

#ifdef __cplusplus
extern "C" {
#endif

#include "input/sensor.h"
#include "core/device.h"
#include "module/adc.h"

/* Start of autogenerated OD types */
/* 0x4000: Device Circuit 1
   A relay that turns circuit on and off, possibly using PWM. Can be paired with Hall Sensor to measure current for taking metrics via ADC. Applying current limit will turn relay into a circuit breaker. */
typedef struct device_circuit_properties {
    uint8_t parameter_count;
    uint8_t port;
    uint8_t pin; // Relay GPIO port (1 for A, 2 for B, etc), required 
    uint16_t limit_current; // Relay GPIO pin, required 
    uint16_t limit_voltage; // Relay will turn off if measured current surpasses this limit 
    uint16_t psu_index; // Currently there is no way to enforce voltage limit 
    uint16_t sensor_index; // PSU circuit is turned on when one of their dependends is turned on 
    uint8_t phase; // Hall sensor measures current and allows circuit to become a circuit breaker 
    uint16_t duty_cycle;
    uint16_t current;
    uint16_t voltage;
    uint8_t consumers;
} device_circuit_properties_t;
/* End of autogenerated OD types */

struct device_circuit {
    device_t *device;
    device_circuit_properties_t *properties;
    device_circuit_t *psu;
    input_sensor_t *current_sensor;
    module_adc_t *adc;;
};

extern device_methods_t device_circuit_methods;

void device_circuit_set_state(device_circuit_t *circuit, bool state);
bool_t device_circuit_get_state(device_circuit_t *circuit);

/* Start of autogenerated OD accessors */
typedef enum device_circuit_properties_properties {
  DEVICE_CIRCUIT_PORT = 0x1,
  DEVICE_CIRCUIT_PIN = 0x2,
  DEVICE_CIRCUIT_LIMIT_CURRENT = 0x3,
  DEVICE_CIRCUIT_LIMIT_VOLTAGE = 0x4,
  DEVICE_CIRCUIT_PSU_INDEX = 0x5,
  DEVICE_CIRCUIT_SENSOR_INDEX = 0x6,
  DEVICE_CIRCUIT_PHASE = 0x7,
  DEVICE_CIRCUIT_DUTY_CYCLE = 0x8,
  DEVICE_CIRCUIT_CURRENT = 0x9,
  DEVICE_CIRCUIT_VOLTAGE = 0x10,
  DEVICE_CIRCUIT_CONSUMERS = 0x11
} device_circuit_properties_properties_t;

OD_ACCESSORS(device, circuit, properties, phase, DEVICE_CIRCUIT_PHASE, uint8_t, u8) /* 0x40XX07: {"description":"Hall sensor measures current and allows circuit to become a circuit breaker","label":null} */
OD_ACCESSORS(device, circuit, properties, duty_cycle, DEVICE_CIRCUIT_DUTY_CYCLE, uint16_t, u16) /* 0x40XX08: {"description":null,"label":null} */
OD_ACCESSORS(device, circuit, properties, current, DEVICE_CIRCUIT_CURRENT, uint16_t, u16) /* 0x40XX09: {"description":null,"label":null} */
OD_ACCESSORS(device, circuit, properties, voltage, DEVICE_CIRCUIT_VOLTAGE, uint16_t, u16) /* 0x40XX0a: {} */
OD_ACCESSORS(device, circuit, properties, consumers, DEVICE_CIRCUIT_CONSUMERS, uint8_t, u8) /* 0x40XX0b: {} */
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* objectAccessOD_H */