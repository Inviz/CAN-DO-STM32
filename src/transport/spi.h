#ifndef INC_SPI
#define INC_SPI

#ifdef __cplusplus
extern "C" {
#endif

#include "core/device.h"
#include "lib/dma.h"
#include "lib/vpool.h"
#include "lib/vpool.h"
#include "module/timer.h"
#include <libopencm3/stm32/spi.h>

/* Start of autogenerated OD types */
/* 0x6220: Transport SPI 1
   ADC Unit used for high-volume sampling of analog signals */
typedef struct {
    int16_t disabled;
    bool_t is_slave;
    bool_t software_ss_control;
    uint8_t mode;
    uint8_t dma_rx_unit;
    uint8_t dma_rx_stream;
    uint8_t dma_rx_channel;
    int16_t dma_rx_idle_timeout;
    uint16_t rx_buffer_size;
    uint16_t rx_pool_max_size;
    uint16_t rx_pool_initial_size;
    uint16_t rx_pool_block_size;
    uint8_t dma_tx_unit;
    uint8_t dma_tx_stream;
    uint8_t dma_tx_channel;
    uint8_t ss_port;
    uint8_t ss_pin;
    uint8_t sck_port;
    uint8_t sck_pin;
    uint8_t miso_port;
    uint8_t miso_pin;
    uint8_t mosi_port;
    uint8_t mosi_pin;
} transport_spi_config_t;
/* End of autogenerated OD types */

typedef struct {
    device_t *device;
    transport_spi_config_t *config;
    uint32_t clock;
    uint32_t address;
    module_timer_t *timer;
    device_t *reader;          // current reading task initiator
    void *reader_argument;     // reading task meta argument to pass back
    device_t *writer;          // current writing task initiator
    void *writer_argument;     // writing task meta argument to pass back
    uint8_t *rx_buffer;        // circular buffer for DMA
    uint16_t rx_buffer_cursor; // current ingested position in rx buffer
    struct vpool rx_pool;      // pool that allocates growing memory chunk for recieved messages
} transport_spi_t;

extern device_callbacks_t transport_spi_callbacks;

/* Set timer to signal device in specified amount of time */
static int transport_spi_schedule_rx_timeout(transport_spi_t *spi);

/* Check if DMAs circular buffer position is still the same */
static int transport_spi_read_is_idle(transport_spi_t *spi);

/* Initiate Tx transmission */
int transport_spi_write(transport_spi_t *spi, device_t *writer, void *argument, uint8_t *tx_buffer, uint16_t tx_size);

/* Initiate Rx transmission */
int transport_spi_read(transport_spi_t *spi, device_t *reader, void *argument);



/* Start of autogenerated OD accessors */
#define SUBIDX_SPI_DISABLED 0x1
#define SUBIDX_SPI_IS_SLAVE 0x2
#define SUBIDX_SPI_SOFTWARE_SS_CONTROL 0x3
#define SUBIDX_SPI_MODE 0x4
#define SUBIDX_SPI_DMA_RX_UNIT 0x5
#define SUBIDX_SPI_DMA_RX_STREAM 0x6
#define SUBIDX_SPI_DMA_RX_CHANNEL 0x7
#define SUBIDX_SPI_DMA_RX_IDLE_TIMEOUT 0x8
#define SUBIDX_SPI_RX_BUFFER_SIZE 0x9
#define SUBIDX_SPI_RX_POOL_MAX_SIZE 0x10
#define SUBIDX_SPI_RX_POOL_INITIAL_SIZE 0x11
#define SUBIDX_SPI_RX_POOL_BLOCK_SIZE 0x12
#define SUBIDX_SPI_DMA_TX_UNIT 0x13
#define SUBIDX_SPI_DMA_TX_STREAM 0x14
#define SUBIDX_SPI_DMA_TX_CHANNEL 0x15
#define SUBIDX_SPI_SS_PORT 0x16
#define SUBIDX_SPI_SS_PIN 0x17
#define SUBIDX_SPI_SCK_PORT 0x18
#define SUBIDX_SPI_SCK_PIN 0x19
#define SUBIDX_SPI_MISO_PORT 0x20
#define SUBIDX_SPI_MISO_PIN 0x21
#define SUBIDX_SPI_MOSI_PORT 0x22
#define SUBIDX_SPI_MOSI_PIN 0x23

/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CO_SPI_H */