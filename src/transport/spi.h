#ifndef INC_SPI
#define INC_SPI

#ifdef __cplusplus
extern "C" {
#endif

#include "core/device.h"
#include "lib/dma.h"
#include "lib/vpool.h"
#include "lib/vpool.h"
#include "module/timer.h"
#include <libopencm3/stm32/spi.h>

/* Start of autogenerated OD types */
/* 0x6220: Transport SPI 1
   ADC Unit used for high-volume sampling of analog signals */
typedef struct transport_spi_properties {
    uint8_t parameter_count;
    uint8_t is_slave;
    uint8_t software_ss_control;
    uint8_t mode;
    uint8_t dma_rx_unit;
    uint8_t dma_rx_stream;
    uint8_t dma_rx_channel;
    int16_t dma_rx_idle_timeout;
    uint16_t rx_buffer_size;
    uint16_t rx_pool_max_size;
    uint16_t rx_pool_initial_size;
    uint16_t rx_pool_block_size;
    uint8_t dma_tx_unit;
    uint8_t dma_tx_stream;
    uint8_t dma_tx_channel;
    uint8_t af_index;
    uint8_t ss_port;
    uint8_t ss_pin;
    uint8_t sck_port;
    uint8_t sck_pin;
    uint8_t miso_port;
    uint8_t miso_pin;
    uint8_t mosi_port;
    uint8_t mosi_pin;
    uint8_t phase;
} transport_spi_properties_t;
/* End of autogenerated OD types */

struct transport_spi {
    device_t *device;
    transport_spi_properties_t *properties;
    uint32_t clock;
    uint32_t address;
    module_timer_t *timer;
    app_event_t reading;      // current reading job
    app_event_t writing;      // current writing job
    uint8_t *rx_buffer;        // circular buffer for DMA
    uint16_t rx_buffer_cursor; // current ingested position in rx buffer
    struct vpool rx_pool;      // pool that allocates growing memory chunk for recieved messages
};

extern device_methods_t transport_spi_methods;

/* Initiate Tx transmission */
int transport_spi_write(transport_spi_t *spi, device_t *writer, void *argument, uint8_t *tx_buffer, uint16_t tx_size);

/* Initiate Rx transmission */
int transport_spi_read(transport_spi_t *spi, device_t *reader, void *argument);



/* Start of autogenerated OD accessors */
#define SUBIDX_SPI_IS_SLAVE 0x1
#define SUBIDX_SPI_SOFTWARE_SS_CONTROL 0x2
#define SUBIDX_SPI_MODE 0x3
#define SUBIDX_SPI_DMA_RX_UNIT 0x4
#define SUBIDX_SPI_DMA_RX_STREAM 0x5
#define SUBIDX_SPI_DMA_RX_CHANNEL 0x6
#define SUBIDX_SPI_DMA_RX_IDLE_TIMEOUT 0x7
#define SUBIDX_SPI_RX_BUFFER_SIZE 0x8
#define SUBIDX_SPI_RX_POOL_MAX_SIZE 0x9
#define SUBIDX_SPI_RX_POOL_INITIAL_SIZE 0x10
#define SUBIDX_SPI_RX_POOL_BLOCK_SIZE 0x11
#define SUBIDX_SPI_DMA_TX_UNIT 0x12
#define SUBIDX_SPI_DMA_TX_STREAM 0x13
#define SUBIDX_SPI_DMA_TX_CHANNEL 0x14
#define SUBIDX_SPI_AF_INDEX 0x15
#define SUBIDX_SPI_SS_PORT 0x16
#define SUBIDX_SPI_SS_PIN 0x17
#define SUBIDX_SPI_SCK_PORT 0x18
#define SUBIDX_SPI_SCK_PIN 0x19
#define SUBIDX_SPI_MISO_PORT 0x20
#define SUBIDX_SPI_MISO_PIN 0x21
#define SUBIDX_SPI_MOSI_PORT 0x22
#define SUBIDX_SPI_MOSI_PIN 0x23
#define SUBIDX_SPI_PHASE 0x24

ODR_t transport_spi_set_is_slave(transport_spi_t *spi, uint8_t value); // 0x62XX01: spi properties is_slave
uint8_t transport_spi_get_is_slave(transport_spi_t *spi); // 0x62XX01: spi properties is_slave
ODR_t transport_spi_set_software_ss_control(transport_spi_t *spi, uint8_t value); // 0x62XX02: spi properties software_ss_control
uint8_t transport_spi_get_software_ss_control(transport_spi_t *spi); // 0x62XX02: spi properties software_ss_control
ODR_t transport_spi_set_mode(transport_spi_t *spi, uint8_t value); // 0x62XX03: spi properties mode
uint8_t transport_spi_get_mode(transport_spi_t *spi); // 0x62XX03: spi properties mode
ODR_t transport_spi_set_dma_rx_unit(transport_spi_t *spi, uint8_t value); // 0x62XX04: spi properties dma_rx_unit
uint8_t transport_spi_get_dma_rx_unit(transport_spi_t *spi); // 0x62XX04: spi properties dma_rx_unit
ODR_t transport_spi_set_dma_rx_stream(transport_spi_t *spi, uint8_t value); // 0x62XX05: spi properties dma_rx_stream
uint8_t transport_spi_get_dma_rx_stream(transport_spi_t *spi); // 0x62XX05: spi properties dma_rx_stream
ODR_t transport_spi_set_dma_rx_channel(transport_spi_t *spi, uint8_t value); // 0x62XX06: spi properties dma_rx_channel
uint8_t transport_spi_get_dma_rx_channel(transport_spi_t *spi); // 0x62XX06: spi properties dma_rx_channel
ODR_t transport_spi_set_dma_rx_idle_timeout(transport_spi_t *spi, int16_t value); // 0x62XX07: spi properties dma_rx_idle_timeout
int16_t transport_spi_get_dma_rx_idle_timeout(transport_spi_t *spi); // 0x62XX07: spi properties dma_rx_idle_timeout
ODR_t transport_spi_set_rx_buffer_size(transport_spi_t *spi, uint16_t value); // 0x62XX08: spi properties rx_buffer_size
uint16_t transport_spi_get_rx_buffer_size(transport_spi_t *spi); // 0x62XX08: spi properties rx_buffer_size
ODR_t transport_spi_set_rx_pool_max_size(transport_spi_t *spi, uint16_t value); // 0x62XX09: spi properties rx_pool_max_size
uint16_t transport_spi_get_rx_pool_max_size(transport_spi_t *spi); // 0x62XX09: spi properties rx_pool_max_size
ODR_t transport_spi_set_rx_pool_initial_size(transport_spi_t *spi, uint16_t value); // 0x62XX0a: spi properties rx_pool_initial_size
uint16_t transport_spi_get_rx_pool_initial_size(transport_spi_t *spi); // 0x62XX0a: spi properties rx_pool_initial_size
ODR_t transport_spi_set_rx_pool_block_size(transport_spi_t *spi, uint16_t value); // 0x62XX0b: spi properties rx_pool_block_size
uint16_t transport_spi_get_rx_pool_block_size(transport_spi_t *spi); // 0x62XX0b: spi properties rx_pool_block_size
ODR_t transport_spi_set_dma_tx_unit(transport_spi_t *spi, uint8_t value); // 0x62XX0c: spi properties dma_tx_unit
uint8_t transport_spi_get_dma_tx_unit(transport_spi_t *spi); // 0x62XX0c: spi properties dma_tx_unit
ODR_t transport_spi_set_dma_tx_stream(transport_spi_t *spi, uint8_t value); // 0x62XX0d: spi properties dma_tx_stream
uint8_t transport_spi_get_dma_tx_stream(transport_spi_t *spi); // 0x62XX0d: spi properties dma_tx_stream
ODR_t transport_spi_set_dma_tx_channel(transport_spi_t *spi, uint8_t value); // 0x62XX0e: spi properties dma_tx_channel
uint8_t transport_spi_get_dma_tx_channel(transport_spi_t *spi); // 0x62XX0e: spi properties dma_tx_channel
ODR_t transport_spi_set_af_index(transport_spi_t *spi, uint8_t value); // 0x62XX0f: spi properties af_index
uint8_t transport_spi_get_af_index(transport_spi_t *spi); // 0x62XX0f: spi properties af_index
ODR_t transport_spi_set_ss_port(transport_spi_t *spi, uint8_t value); // 0x62XX10: spi properties ss_port
uint8_t transport_spi_get_ss_port(transport_spi_t *spi); // 0x62XX10: spi properties ss_port
ODR_t transport_spi_set_ss_pin(transport_spi_t *spi, uint8_t value); // 0x62XX11: spi properties ss_pin
uint8_t transport_spi_get_ss_pin(transport_spi_t *spi); // 0x62XX11: spi properties ss_pin
ODR_t transport_spi_set_sck_port(transport_spi_t *spi, uint8_t value); // 0x62XX12: spi properties sck_port
uint8_t transport_spi_get_sck_port(transport_spi_t *spi); // 0x62XX12: spi properties sck_port
ODR_t transport_spi_set_sck_pin(transport_spi_t *spi, uint8_t value); // 0x62XX13: spi properties sck_pin
uint8_t transport_spi_get_sck_pin(transport_spi_t *spi); // 0x62XX13: spi properties sck_pin
ODR_t transport_spi_set_miso_port(transport_spi_t *spi, uint8_t value); // 0x62XX14: spi properties miso_port
uint8_t transport_spi_get_miso_port(transport_spi_t *spi); // 0x62XX14: spi properties miso_port
ODR_t transport_spi_set_miso_pin(transport_spi_t *spi, uint8_t value); // 0x62XX15: spi properties miso_pin
uint8_t transport_spi_get_miso_pin(transport_spi_t *spi); // 0x62XX15: spi properties miso_pin
ODR_t transport_spi_set_mosi_port(transport_spi_t *spi, uint8_t value); // 0x62XX16: spi properties mosi_port
uint8_t transport_spi_get_mosi_port(transport_spi_t *spi); // 0x62XX16: spi properties mosi_port
ODR_t transport_spi_set_mosi_pin(transport_spi_t *spi, uint8_t value); // 0x62XX17: spi properties mosi_pin
uint8_t transport_spi_get_mosi_pin(transport_spi_t *spi); // 0x62XX17: spi properties mosi_pin
ODR_t transport_spi_set_phase(transport_spi_t *spi, uint8_t value); // 0x62XX18: spi properties phase
uint8_t transport_spi_get_phase(transport_spi_t *spi); // 0x62XX18: spi properties phase
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CO_SPI_H */