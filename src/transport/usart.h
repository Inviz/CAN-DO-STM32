#ifndef INC_DEV_USART
#define INC_DEV_USART

#ifdef __cplusplus
extern "C" {
#endif

#include "core/device.h"
#include <libopencm3/stm32/usart.h>

#define USART_RX_BUFFER_SIZE 64

/* Start of autogenerated OD types */
/* 0x6240: Transport USART 1
   Serial protocol */
typedef struct transport_usart_properties {
    uint8_t parameter_count;
    uint8_t dma_rx_unit;
    uint8_t dma_rx_stream;
    uint8_t dma_rx_channel;
    uint8_t dma_rx_buffer_size;
    uint8_t dma_tx_unit;
    uint8_t dma_tx_stream;
    uint8_t dma_tx_channel;
    uint32_t baudrate;
    uint8_t databits;
    uint8_t phase;
} transport_usart_properties_t;
/* End of autogenerated OD types */

struct transport_usart {
    device_t *device;
    transport_usart_properties_t *properties;
    uint32_t clock;
    uint32_t address;
    uint32_t dma_tx_address;
    uint32_t dma_rx_address;
    device_t *target_device;
    void *target_argument;

    uint8_t *dma_rx_buffer;
};

extern device_class_t transport_usart_class;

int transport_usart_send(transport_usart_t *usart, char *data, int size);


/* Start of autogenerated OD accessors */
typedef enum transport_usart_properties_properties {
  TRANSPORT_USART_DMA_RX_UNIT = 0x1,
  TRANSPORT_USART_DMA_RX_STREAM = 0x2,
  TRANSPORT_USART_DMA_RX_CHANNEL = 0x3,
  TRANSPORT_USART_DMA_RX_BUFFER_SIZE = 0x4,
  TRANSPORT_USART_DMA_TX_UNIT = 0x5,
  TRANSPORT_USART_DMA_TX_STREAM = 0x6,
  TRANSPORT_USART_DMA_TX_CHANNEL = 0x7,
  TRANSPORT_USART_BAUDRATE = 0x8,
  TRANSPORT_USART_DATABITS = 0x9,
  TRANSPORT_USART_PHASE = 0x10
} transport_usart_properties_properties_t;

/* 0x62XX0a: undefined */
#define transport_usart_set_phase(usart, value) OD_set_u8(usart->device->properties, TRANSPORT_USART_PHASE, value, false)
#define transport_usart_get_phase(usart) *((uint8_t *) OD_getPtr(usart->device->properties, TRANSPORT_USART_PHASE, 0, NULL))
/* End of autogenerated OD accessors */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif